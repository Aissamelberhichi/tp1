{"ast":null,"code":"// src/services/api.js - Service pour interagir avec l'API\nimport axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Créer une instance axios avec la configuration de base\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Fonctions pour interagir avec l'API\nexport const taskService = {\n  // Récupérer toutes les tâches\n  getAllTasks: async () => {\n    try {\n      const response = await apiClient.get('/tasks');\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des tâches:', error);\n      throw error;\n    }\n  },\n  // Ajouter une nouvelle tâche\n  createTask: async taskData => {\n    try {\n      const response = await apiClient.post('/tasks', taskData);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la création de la tâche:', error);\n      throw error;\n    }\n  }\n};\n\n// Intercepteur pour l'authentification\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));","map":{"version":3,"names":["axios","API_URL","apiClient","create","baseURL","headers","taskService","getAllTasks","response","get","data","error","console","createTask","taskData","post","interceptors","request","use","config","token","localStorage","getItem","Authorization","Promise","reject"],"sources":["D:/EST/S6/dep/tp1/tp1/client/src/services/api.js"],"sourcesContent":["// src/services/api.js - Service pour interagir avec l'API\nimport axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Créer une instance axios avec la configuration de base\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Fonctions pour interagir avec l'API\nexport const taskService = {\n  // Récupérer toutes les tâches\n  getAllTasks: async () => {\n    try {\n      const response = await apiClient.get('/tasks');\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des tâches:', error);\n      throw error;\n    }\n  },\n\n  // Ajouter une nouvelle tâche\n  createTask: async (taskData) => {\n    try {\n      const response = await apiClient.post('/tasks', taskData);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la création de la tâche:', error);\n      throw error;\n    }\n  }\n};\n\n// Intercepteur pour l'authentification\napiClient.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  error => Promise.reject(error)\n);\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,WAAW,GAAG;EACzB;EACAC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMN,SAAS,CAACO,GAAG,CAAC,QAAQ,CAAC;MAC9C,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MAClE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAE,UAAU,EAAE,MAAOC,QAAQ,IAAK;IAC9B,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMN,SAAS,CAACa,IAAI,CAAC,QAAQ,EAAED,QAAQ,CAAC;MACzD,OAAON,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/D,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACAT,SAAS,CAACc,YAAY,CAACC,OAAO,CAACC,GAAG,CAChCC,MAAM,IAAI;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACd,OAAO,CAACkB,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACDR,KAAK,IAAIa,OAAO,CAACC,MAAM,CAACd,KAAK,CAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}